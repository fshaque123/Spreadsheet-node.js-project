<!DOCTYPE html>


<html lang="en">
  <head>
    <meta name="viewport" charset="utf-8" content="width=device-width, initial-scale=1.0"/>
    <link rel="stylesheet" href="styles.css">


    <div class="topnav">

      <a href="/mySheets">Home</a>
      <a href="/profile">My Profile</a>
      <a href="/admin">Admin</a>
      <a href="/editSheets">Edit Speadsheets</a>
      <a href="/sharedSheets">Shared sheets</a>
      <a href= "/charts">Charting</a>
    </div>
   
   <script>
 
    const requestParams = {
         mode: 'cors',
         credentials: 'same-origin',
         headers : {
             'Accept' : 'application/json',
             'Content-Type' : 'application/json',
         },
    };

    // creates a n columns by m row of text inputs
    function makeSpreadSheet( n, m ) {
        const sheet = document.createElement('div');
        sheet.setAttribute('class', 'sheet');
        for( let j = 0 ; j < m ; j++ ) {
            const row = document.createElement('div');
            row.setAttribute('class', 'row');
            for( let i = 0; i < n; i++ ) {
                const inp = document.createElement('input');
                row.append( inp );
            }
            sheet.append( row );
        }
        return sheet;
    }

    // get a 2D array of the inputs, note this array matches
    // the row/column organization of the spread sheet
    function getSheetInputs( element ) {
        const ssRow = Array.from(element.querySelectorAll('div.row'));
        const sheet = ssRow.map( (r) => {
            return Array.from(r.querySelectorAll('input'));
        });
        return sheet;
    }

    // return a 2D array of values
    function getValues( sheetInputs ) {
        return sheetInputs.map( (r) => r.map( (c) => c.value ));
    }

    // assumes sizes of inputs and values are the same
    // set the 2d inputs to the matching values
    function setValues( sheetInputs, values ) {
        for( let i=0 ; i < sheetInputs.length; i++ ) {
            const row = sheetInputs[i];
            for( let j=0; j < row.length; j++ ) {
                row[j].value = values[i][j]; 
            }
        }
    }
</script>
</head>
<body>

<h1 id="editSheetsHeadings">User's Sheets</h1>
<p>
  
</p>
<ol id="list"> </ol>
<script>
    // endpoint GET /sheet-list returns a JSON array
    // of all the names of the spread sheets in the database
    const listArea = document.querySelector('#list');
    // load all the available spread sheet names

    async function loadNames( container ) {
        const params = {...requestParams, method: 'GET' };
        const resp = await fetch( '/sheet-list', params );
        const json = await resp.json();
        container.innerHTML = '';
        container.append( ...json.map( (x) => {
            const li = document.createElement('li');
            const span = document.createElement('span');
            span.textContent = x;
            li.append( span );
            li.append( ' ' );
            
            return li;
        } ));
        console.log( json );
    }
    loadNames( listArea );


    

    // clicking on a list item load the spread sheet

</script>




<h1>Spread Sheets</h1>


<div class="ctrl">
    <label> Name: <input id="sheetname"> </label>
    <button id="load">Load</button>
    <button id="save">Save</button>
   
    
      
    <button id="export-csv">Export CSV</button>
</div>
</br>
<div id="spread-sheet"></div>



<h1>CSV Export</h1>
<p>The exported spread sheet will appear here.</p>
<pre id="csv"></pre>

<script>
    const sSheet = document.querySelector('#spread-sheet');
    const csvDisplay = document.querySelector('#csv');

    const loadButton = document.querySelector('#load');
    const saveButton = document.querySelector('#save');
    const sheetName = document.querySelector('#sheetname');
    const exportButton = document.querySelector('#export-csv');
    let row;
    let col;
    let sheet;
    

    // endpoint PUT /sheet/:name 
    // saves the sheet in the database with name 
    saveButton.addEventListener('click', async (evt) => {
        const name = sheetName.value;
        if ( name.trim().length === 0 ) return; // ignore if no name
        const inputs = getSheetInputs( sheet );
        const values = JSON.stringify( getValues( inputs ) );
        const params = {...requestParams, method: 'PUT', body: values };
        const resp = await fetch( `/sheet/${name}`, params );
        const json = await resp.json();
        console.log( 'save', json );


        if ( json.ok ) {
            // refresh the names
            await loadNames( listArea );
        
            await loadSheetChoice();
        }
    });


    loadButton.addEventListener('click', async (evt) => {
        
       
        const name = sheetName.value;
        if ( name.trim().length === 0 ) return; // ignore if no name
 
        
        const params = {...requestParams, method: 'GET' };
        const resp = await fetch( `/sheet/${name}`, params );
        
         const json = await resp.json();
        
        console.log( json );
        row= json.length;
        console.log(row);
        col= json[0].length;
        console.log(col);


        sheet = makeSpreadSheet( col, row );
        sSheet.append( sheet );
        const inputs = getSheetInputs( sheet );
        setValues( inputs, json );

    });

    

    exportButton.addEventListener('click', async (evt) => {
        const name = sheetName.value;
        const inputs = getSheetInputs( sheet );
        const values = JSON.stringify( getValues( inputs ) );
        const params = {...requestParams, method: 'PUT', body: values };
        const resp = await fetch( '/csv-export', params );
        // read the text
        const text = await resp.text();
        console.log( text );
        csvDisplay.textContent = text;
    });

</script>


<h1>CSV Import</h1>
<div class="ctrl">
    <label> Name: <input id="import-name"> </label>
    <button id="import">Import</button>
    <p>
        
    </p>
    <textarea id="csv-input" rows="10" cols="50"></textarea> 
</div>

<script>
    async function importCSV( name, content ) {
        // the transmitted content is plain text from the text area
        const params = {
            ...requestParams, method: 'PUT',
            headers : {
                'Accept' : 'application/json',
                'Content-Type' : 'text/plain',
            },
            body: content,
        };
        const resp = await fetch( `/csv-import/${name}`, params );
        const json = await resp.json();
        return json;
    }

    // endpoint PUT /csv-import/:name
    // import CSV from browser
    const importButton = document.querySelector('#import');
    const importName = document.querySelector('#import-name');
    const csvInput = document.querySelector('#csv-input');
    importButton.addEventListener( 'click', async (evt) => {
        const name = importName.value;
        if ( name.trim().length === 0 ) return; // ignore if no name
        const json = await importCSV( name, csvInput.value );
        console.log( json );
        if ( json.ok ) {
            // refresh the names
            await loadNames( listArea );
            await downloadLinks();
            await loadSheetChoice();
        }
    });

</script>


</body>


</html>